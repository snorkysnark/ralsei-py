from typing import List

from .protocols import OneToOne, OneToMany
from .wrappers import (
    FnWrapper,
    PopIdFields,
    RenameOutput,
    RenameInput,
    into_one,
    into_many,
)


class FnBuilderBase:
    """Base class for function wrapper builders"""

    def __init__(self) -> None:
        self.wrappers: List[FnWrapper] = []

    def add_wrapper(self, wrapper: FnWrapper):
        self.wrappers.append(wrapper)
        return self

    def pop_id_fields(self, *id_fields: str, keep: bool = False):
        """(Optionally) removes fields from the input kwargs
        and reinserts them back into the output
        ---
        Args:
        - `*id_fields` (str): fields to pop from the kwargs
        - keep (bool, optional): if True, `id_fields` are not removed from kwargs
        (but still remembered and reinserted into the output), False by default"""
        self.add_wrapper(PopIdFields(*id_fields, keep=keep))
        return self

    def rename_input(self, remap_fields: dict[str, str]):
        """Remaps field names in the `**kwargs` dictionary"""
        self.add_wrapper(RenameInput(remap_fields))
        return self

    def rename_output(self, remap_fields: dict[str, str]):
        """Remaps field values in dictionaries generated by the inner function"""
        self.add_wrapper(RenameOutput(remap_fields))
        return self

    def _wrap_all(self, fn: OneToMany) -> OneToMany:
        """Apply all of the wrappers in the order they were added"""
        for wrapper in self.wrappers:
            fn = wrapper.wrap(fn)
        return fn


class GeneratorBuilder(FnBuilderBase):
    """Build a function of type `(*args) -> Generator[dict]`"""

    def __init__(self, fn: OneToMany) -> None:
        """Args:
        - fn (OneToMany): Base function around which to create wrappers"""
        super().__init__()
        self.fn = fn

    def build(self) -> OneToMany:
        return self._wrap_all(self.fn)


class FnBuilder(FnBuilderBase):
    """Build a function of type (*args) -> dict"""

    def __init__(self, fn: OneToOne) -> None:
        """Args:
        - fn (OneToOne): Base function around which to create wrappers"""
        super().__init__()
        self.fn = fn

    def build(self) -> OneToOne:
        return into_one(self._wrap_all(into_many(self.fn)))
