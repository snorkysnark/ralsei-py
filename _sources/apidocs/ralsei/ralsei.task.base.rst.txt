:py:mod:`ralsei.task.base`
==========================

.. py:module:: ralsei.task.base

.. autodoc2-docstring:: ralsei.task.base
   :parser: autodoc2_napoleon
   :allowtitles:

Module Contents
---------------

Classes
~~~~~~~

.. list-table::
   :class: autosummary longtable
   :align: left

   * - :py:obj:`Task <ralsei.task.base.Task>`
     - .. autodoc2-docstring:: ralsei.task.base.Task
          :parser: autodoc2_napoleon
          :summary:
   * - :py:obj:`TaskImpl <ralsei.task.base.TaskImpl>`
     - .. autodoc2-docstring:: ralsei.task.base.TaskImpl
          :parser: autodoc2_napoleon
          :summary:
   * - :py:obj:`TaskDef <ralsei.task.base.TaskDef>`
     - .. autodoc2-docstring:: ralsei.task.base.TaskDef
          :parser: autodoc2_napoleon
          :summary:

API
~~~

.. py:class:: Task
   :canonical: ralsei.task.base.Task

   Bases: :py:obj:`abc.ABC`

   .. autodoc2-docstring:: ralsei.task.base.Task
      :parser: autodoc2_napoleon

   .. py:method:: run(conn: ralsei.connection.ConnectionExt)
      :canonical: ralsei.task.base.Task.run
      :abstractmethod:

      .. autodoc2-docstring:: ralsei.task.base.Task.run
         :parser: autodoc2_napoleon

   .. py:method:: delete(conn: ralsei.connection.ConnectionExt)
      :canonical: ralsei.task.base.Task.delete
      :abstractmethod:

      .. autodoc2-docstring:: ralsei.task.base.Task.delete
         :parser: autodoc2_napoleon

   .. py:method:: redo(conn: ralsei.connection.ConnectionExt)
      :canonical: ralsei.task.base.Task.redo

      .. autodoc2-docstring:: ralsei.task.base.Task.redo
         :parser: autodoc2_napoleon

   .. py:property:: output
      :canonical: ralsei.task.base.Task.output
      :abstractmethod:
      :type: typing.Any

      .. autodoc2-docstring:: ralsei.task.base.Task.output
         :parser: autodoc2_napoleon

   .. py:method:: exists(conn: ralsei.connection.ConnectionExt) -> bool
      :canonical: ralsei.task.base.Task.exists
      :abstractmethod:

      .. autodoc2-docstring:: ralsei.task.base.Task.exists
         :parser: autodoc2_napoleon

   .. py:method:: scripts() -> typing.Iterable[tuple[str, object]]
      :canonical: ralsei.task.base.Task.scripts

      .. autodoc2-docstring:: ralsei.task.base.Task.scripts
         :parser: autodoc2_napoleon

.. py:class:: TaskImpl(this: D, env: ralsei.jinja.ISqlEnvironment)
   :canonical: ralsei.task.base.TaskImpl

   Bases: :py:obj:`ralsei.task.base.Task`

   .. autodoc2-docstring:: ralsei.task.base.TaskImpl
      :parser: autodoc2_napoleon

   .. rubric:: Initialization

   .. autodoc2-docstring:: ralsei.task.base.TaskImpl.__init__
      :parser: autodoc2_napoleon

   .. py:attribute:: env
      :canonical: ralsei.task.base.TaskImpl.env
      :type: ralsei.jinja.ISqlEnvironment
      :value: None

      .. autodoc2-docstring:: ralsei.task.base.TaskImpl.env
         :parser: autodoc2_napoleon

   .. py:attribute:: _scripts
      :canonical: ralsei.task.base.TaskImpl._scripts
      :type: dict[str, object]
      :value: None

      .. autodoc2-docstring:: ralsei.task.base.TaskImpl._scripts
         :parser: autodoc2_napoleon

   .. py:method:: prepare(this: D)
      :canonical: ralsei.task.base.TaskImpl.prepare

      .. autodoc2-docstring:: ralsei.task.base.TaskImpl.prepare
         :parser: autodoc2_napoleon

   .. py:method:: resolve(value: ralsei.graph.Resolves[ralsei.task.base.TaskImpl.resolve.T]) -> ralsei.task.base.TaskImpl.resolve.T
      :canonical: ralsei.task.base.TaskImpl.resolve

      .. autodoc2-docstring:: ralsei.task.base.TaskImpl.resolve
         :parser: autodoc2_napoleon

   .. py:method:: run(conn: ralsei.connection.ConnectionExt)
      :canonical: ralsei.task.base.TaskImpl.run

   .. py:method:: delete(conn: ralsei.connection.ConnectionExt)
      :canonical: ralsei.task.base.TaskImpl.delete

   .. py:method:: exists(conn: ralsei.connection.ConnectionExt) -> bool
      :canonical: ralsei.task.base.TaskImpl.exists

   .. py:method:: _run(conn: ralsei.connection.ConnectionEnvironment)
      :canonical: ralsei.task.base.TaskImpl._run
      :abstractmethod:

      .. autodoc2-docstring:: ralsei.task.base.TaskImpl._run
         :parser: autodoc2_napoleon

   .. py:method:: _delete(conn: ralsei.connection.ConnectionEnvironment)
      :canonical: ralsei.task.base.TaskImpl._delete
      :abstractmethod:

      .. autodoc2-docstring:: ralsei.task.base.TaskImpl._delete
         :parser: autodoc2_napoleon

   .. py:method:: _exists(conn: ralsei.connection.ConnectionEnvironment) -> bool
      :canonical: ralsei.task.base.TaskImpl._exists
      :abstractmethod:

      .. autodoc2-docstring:: ralsei.task.base.TaskImpl._exists
         :parser: autodoc2_napoleon

   .. py:method:: scripts() -> typing.Iterable[tuple[str, object]]
      :canonical: ralsei.task.base.TaskImpl.scripts

      .. autodoc2-docstring:: ralsei.task.base.TaskImpl.scripts
         :parser: autodoc2_napoleon

.. py:class:: TaskDef
   :canonical: ralsei.task.base.TaskDef

   .. autodoc2-docstring:: ralsei.task.base.TaskDef
      :parser: autodoc2_napoleon

   .. py:attribute:: Impl
      :canonical: ralsei.task.base.TaskDef.Impl
      :type: typing.ClassVar[type[ralsei.task.base.TaskImpl[typing.Self]]]
      :value: None

      .. autodoc2-docstring:: ralsei.task.base.TaskDef.Impl
         :parser: autodoc2_napoleon

   .. py:attribute:: locals
      :canonical: ralsei.task.base.TaskDef.locals
      :type: dict[str, typing.Any]
      :value: 'field(...)'

      .. autodoc2-docstring:: ralsei.task.base.TaskDef.locals
         :parser: autodoc2_napoleon

   .. py:method:: create(env: ralsei.jinja.SqlEnvironment) -> ralsei.task.base.TaskImpl[typing.Self]
      :canonical: ralsei.task.base.TaskDef.create

      .. autodoc2-docstring:: ralsei.task.base.TaskDef.create
         :parser: autodoc2_napoleon
